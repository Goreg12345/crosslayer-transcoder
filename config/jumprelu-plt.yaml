# Default configuration for CrossLayer Transcoder training
# This file uses Lightning CLI's automatic class construction

seed_everything: 42

trainer:
  # max_steps is number of gradient updates. If using gradient accumulation, this is not the number of batches.
  max_steps: 100_000 
  val_check_interval: 1_000
  limit_val_batches: 1
  enable_checkpointing: false  # We use custom end-of-training checkpoint
  num_sanity_val_steps: 0  # Can't run replacement model before standardizers are initialized
  precision: "16-mixed"
  accelerator: "gpu"
  devices: [0]  # [0] means cuda:0
  accumulate_grad_batches: 1
  logger:  # WandB logger is recommended but other loggers are supported as well
    class_path: lightning.pytorch.loggers.WandbLogger
    init_args:
      project: "clt"
      name: "jumprelu"
      save_dir: "./wandb"
  callbacks:
    - class_path: crosslayer_transcoder.utils.callbacks.EndOfTrainingCheckpointCallback
      init_args:
        checkpoint_dir: "checkpoints"

model:
  class_path: crosslayer_transcoder.model.clt_lightning.JumpReLUCrossLayerTranscoderModule
  init_args:
    model:
      class_path: crosslayer_transcoder.model.clt.CrossLayerTranscoder
      init_args:
        encoder:
          class_path: crosslayer_transcoder.model.clt.Encoder
          init_args:
            d_acts: 768
            d_features: 10_000
            n_layers: 12

        decoder:
          class_path: crosslayer_transcoder.model.clt.Decoder
          init_args:
            d_acts: 768
            d_features: 10_000
            n_layers: 12
        
        nonlinearity:
          class_path: crosslayer_transcoder.model.jumprelu.JumpReLU
          init_args:
            theta: 0.03
            bandwidth: 0.01
            n_layers: 12
            d_features: 10_000
        
        input_standardizer:
          class_path: crosslayer_transcoder.model.standardize.DimensionwiseInputStandardizer
          init_args:
            n_layers: 12
            activation_dim: 768
        
        output_standardizer:
          class_path: crosslayer_transcoder.model.standardize.DimensionwiseOutputStandardizer
          init_args:
            n_layers: 12
            activation_dim: 768

    # Pre-constructed replacement model
    replacement_model:
      class_path: crosslayer_transcoder.metrics.replacement_model_accuracy.ReplacementModelAccuracy
      init_args:
        model_name: "openai-community/gpt2"
        device_map: "cuda:0"  # should match trainer.devices
        loader_batch_size: 2
    
    # Pre-constructed dead features metric
    dead_features:
      class_path: crosslayer_transcoder.metrics.dead_features.DeadFeatures
      init_args:
        n_features: 10_000
        n_layers: 12
        return_per_layer: true
        return_log_freqs: true
        return_neuron_indices: true
    

    # Training parameters
    learning_rate: 1e-4
    compile: true  # if using torch.compile
    lr_decay_step: 80_000  # lr is scaled by lr_decay_factor after this many steps
    lr_decay_factor: 0.1

    lambda_sparsity: 0.0007  # sparsity loss weight
    c_sparsity: 1  # sparsity loss coefficient
    use_tanh: true  # use tanh nonlinearity in the JumpReLU
    pre_actv_loss: 1e-6  # pre-activation loss weight

    # Dead features computation settings
    compute_dead_features: true
    compute_dead_features_every: 500

data:
  class_path: crosslayer_transcoder.data.datamodule.ActivationDataModule
  init_args:
    # Buffer settings
    buffer_size: 1_000_000  # number of activations to store in the buffer
    n_in_out: 2  # number of input and output layers
    n_layers: 12  # number of layers in the model
    activation_dim: 768  # dimension of the activations
    dtype: "float16"  # dtype of the activations
    max_batch_size: 50000  # maximum batch size for the data loader
    
    # Model settings for activation generation
    model_name: "openai-community/gpt2"
    model_dtype: "float32"
    
    # Dataset settings
    dataset_name: "Skylion007/openwebtext"
    dataset_split: "train"
    max_sequence_length: 1024
    
    # Generation settings
    generation_batch_size: 10
    refresh_interval: 0.1  # time (s) between shell logs updates
    
    # Memory settings
    shared_memory_name: "activation_buffer"
    timeout_seconds: 30
    
    # File paths
    init_file: null  # path to file with shuffled activations to initialize the buffer fast
    # if null, activations are generated and training starts when the buffer is at least minimum_fill_threshold full
    
    # DataLoader settings
    batch_size: 1000
    num_workers: 10
    prefetch_factor: 2
    shuffle: true
    persistent_workers: true
    pin_memory: true
    
    minimum_fill_threshold: 0.2  # Only provide activations when buffer is at least 20% full
    # to maintain sufficient shuffling

    use_shared_memory: true

    # Device configuration
    device_map: "cuda:0"  # "cpu", "auto", "cuda:0", "cuda:0,1,2,3"
    deployment_policy: "gpu_only"  # "cpu_only", "gpu_only", or "dynamic"
    # dynamic will use CPU and only GPU if the buffer is almost empty to refill fast. Use this if you use a single GPU and have a beefy CPU.

    # WandB logging configuration for data generation
    wandb_logging:
      enabled: true                           # Enable WandB logging for data generation
      project: "clt"        # WandB project (should match trainer logger)
      group: null                             # Group name (null = auto-generated from training run)
      run_name: "data-generator-jumprelu"              # Run name suffix
      tags: ["data-generation"]               # Tags for the data generation run
      save_dir: "./wandb"                     # Directory for WandB files
      log_interval: 5.0                       # Logging interval in seconds

ckpt_path: null